// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: event.proto

package eventpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Standard well-defined IP protocols.
type IPProto int32

const (
	IPProto_IP       IPProto = 0   // Dummy protocol for TCP.
	IPProto_ICMP     IPProto = 1   // Internet Control Message Protocol.
	IPProto_IGMP     IPProto = 2   // Internet Group Management Protocol.
	IPProto_IPIP     IPProto = 4   // IPIP tunnels (older KA9Q tunnels use 94).
	IPProto_TCP      IPProto = 6   // Transmission Control Protocol.
	IPProto_EGP      IPProto = 8   // Exterior Gateway Protocol.
	IPProto_PUP      IPProto = 12  // PUP protocol.
	IPProto_UDP      IPProto = 17  // User Datagram Protocol.
	IPProto_IDP      IPProto = 22  // XNS IDP protocol.
	IPProto_TP       IPProto = 29  // SO Transport Protocol Class 4.
	IPProto_DCCP     IPProto = 33  // Datagram Congestion Control Protocol.
	IPProto_IPV6     IPProto = 41  // IPv6 header.
	IPProto_RSVP     IPProto = 46  // Reservation Protocol.
	IPProto_GRE      IPProto = 47  // General Routing Encapsulation.
	IPProto_ESP      IPProto = 50  // encapsulating security payload.
	IPProto_AH       IPProto = 51  // authentication header.
	IPProto_MTP      IPProto = 92  // Multicast Transport Protocol.
	IPProto_BEETPH   IPProto = 94  // IP option pseudo header for BEET.
	IPProto_ENCAP    IPProto = 98  // Encapsulation Header.
	IPProto_PIM      IPProto = 103 // Protocol Independent Multicast.
	IPProto_COMP     IPProto = 108 // Compression Header Protocol.
	IPProto_SCTP     IPProto = 132 // Stream Control Transmission Protocol.
	IPProto_UDPLITE  IPProto = 136 // UDP-Lite protocol.
	IPProto_MPLS     IPProto = 137 // MPLS in IP.
	IPProto_ETHERNET IPProto = 143 // Ethernet-within-IPv6 Encapsulation.
	IPProto_RAW      IPProto = 255 // Raw IP packets.
	IPProto_MPTCP    IPProto = 262 // Multipath TCP connection.
)

// Enum value maps for IPProto.
var (
	IPProto_name = map[int32]string{
		0:   "IP",
		1:   "ICMP",
		2:   "IGMP",
		4:   "IPIP",
		6:   "TCP",
		8:   "EGP",
		12:  "PUP",
		17:  "UDP",
		22:  "IDP",
		29:  "TP",
		33:  "DCCP",
		41:  "IPV6",
		46:  "RSVP",
		47:  "GRE",
		50:  "ESP",
		51:  "AH",
		92:  "MTP",
		94:  "BEETPH",
		98:  "ENCAP",
		103: "PIM",
		108: "COMP",
		132: "SCTP",
		136: "UDPLITE",
		137: "MPLS",
		143: "ETHERNET",
		255: "RAW",
		262: "MPTCP",
	}
	IPProto_value = map[string]int32{
		"IP":       0,
		"ICMP":     1,
		"IGMP":     2,
		"IPIP":     4,
		"TCP":      6,
		"EGP":      8,
		"PUP":      12,
		"UDP":      17,
		"IDP":      22,
		"TP":       29,
		"DCCP":     33,
		"IPV6":     41,
		"RSVP":     46,
		"GRE":      47,
		"ESP":      50,
		"AH":       51,
		"MTP":      92,
		"BEETPH":   94,
		"ENCAP":    98,
		"PIM":      103,
		"COMP":     108,
		"SCTP":     132,
		"UDPLITE":  136,
		"MPLS":     137,
		"ETHERNET": 143,
		"RAW":      255,
		"MPTCP":    262,
	}
)

func (x IPProto) Enum() *IPProto {
	p := new(IPProto)
	*p = x
	return p
}

func (x IPProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPProto) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[0].Descriptor()
}

func (IPProto) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[0]
}

func (x IPProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPProto.Descriptor instead.
func (IPProto) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

type StreamDirection int32

const (
	StreamDirection_SD_UNKNOWN  StreamDirection = 0
	StreamDirection_SD_UPLINK   StreamDirection = 1
	StreamDirection_SD_DOWNLINK StreamDirection = 2
)

// Enum value maps for StreamDirection.
var (
	StreamDirection_name = map[int32]string{
		0: "SD_UNKNOWN",
		1: "SD_UPLINK",
		2: "SD_DOWNLINK",
	}
	StreamDirection_value = map[string]int32{
		"SD_UNKNOWN":  0,
		"SD_UPLINK":   1,
		"SD_DOWNLINK": 2,
	}
)

func (x StreamDirection) Enum() *StreamDirection {
	p := new(StreamDirection)
	*p = x
	return p
}

func (x StreamDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[1].Descriptor()
}

func (StreamDirection) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[1]
}

func (x StreamDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamDirection.Descriptor instead.
func (StreamDirection) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

// main event log
type EventLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string  `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                          // message generate timestamp
	StartTime string  `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`         // flow start timestamp
	SrcIp     string  `protobuf:"bytes,3,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`                     // source IP
	DestIp    string  `protobuf:"bytes,4,opt,name=dest_ip,json=destIp,proto3" json:"dest_ip,omitempty"`                  // dest IP
	SrcPort   int32   `protobuf:"varint,5,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`              // source port
	DestPort  int32   `protobuf:"varint,6,opt,name=dest_port,json=destPort,proto3" json:"dest_port,omitempty"`           // dest port
	IpProto   IPProto `protobuf:"varint,7,opt,name=ip_proto,json=ipProto,proto3,enum=IPProto" json:"ip_proto,omitempty"` // transport protocol (TCP/UDP/SCTP)
	// Types that are assignable to EventType:
	//
	//	*EventLog_Flow
	//	*EventLog_Dns
	//	*EventLog_Http
	//	*EventLog_Packet
	//	*EventLog_Stream
	EventType isEventLog_EventType `protobuf_oneof:"event_type"`
}

func (x *EventLog) Reset() {
	*x = EventLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLog) ProtoMessage() {}

func (x *EventLog) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLog.ProtoReflect.Descriptor instead.
func (*EventLog) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventLog) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *EventLog) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *EventLog) GetSrcIp() string {
	if x != nil {
		return x.SrcIp
	}
	return ""
}

func (x *EventLog) GetDestIp() string {
	if x != nil {
		return x.DestIp
	}
	return ""
}

func (x *EventLog) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *EventLog) GetDestPort() int32 {
	if x != nil {
		return x.DestPort
	}
	return 0
}

func (x *EventLog) GetIpProto() IPProto {
	if x != nil {
		return x.IpProto
	}
	return IPProto_IP
}

func (m *EventLog) GetEventType() isEventLog_EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (x *EventLog) GetFlow() *FlowLog {
	if x, ok := x.GetEventType().(*EventLog_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *EventLog) GetDns() *DnsLog {
	if x, ok := x.GetEventType().(*EventLog_Dns); ok {
		return x.Dns
	}
	return nil
}

func (x *EventLog) GetHttp() *HttpLog {
	if x, ok := x.GetEventType().(*EventLog_Http); ok {
		return x.Http
	}
	return nil
}

func (x *EventLog) GetPacket() *PacketLog {
	if x, ok := x.GetEventType().(*EventLog_Packet); ok {
		return x.Packet
	}
	return nil
}

func (x *EventLog) GetStream() *StreamLog {
	if x, ok := x.GetEventType().(*EventLog_Stream); ok {
		return x.Stream
	}
	return nil
}

type isEventLog_EventType interface {
	isEventLog_EventType()
}

type EventLog_Flow struct {
	Flow *FlowLog `protobuf:"bytes,8,opt,name=flow,proto3,oneof"`
}

type EventLog_Dns struct {
	Dns *DnsLog `protobuf:"bytes,9,opt,name=dns,proto3,oneof"`
}

type EventLog_Http struct {
	Http *HttpLog `protobuf:"bytes,10,opt,name=http,proto3,oneof"`
}

type EventLog_Packet struct {
	Packet *PacketLog `protobuf:"bytes,11,opt,name=packet,proto3,oneof"`
}

type EventLog_Stream struct {
	Stream *StreamLog `protobuf:"bytes,12,opt,name=stream,proto3,oneof"`
}

func (*EventLog_Flow) isEventLog_EventType() {}

func (*EventLog_Dns) isEventLog_EventType() {}

func (*EventLog_Http) isEventLog_EventType() {}

func (*EventLog_Packet) isEventLog_EventType() {}

func (*EventLog_Stream) isEventLog_EventType() {}

type TCPPacketMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tcpflags    uint32 `protobuf:"varint,1,opt,name=tcpflags,proto3" json:"tcpflags,omitempty"`
	Hlen        uint32 `protobuf:"varint,2,opt,name=hlen,proto3" json:"hlen,omitempty"`
	CalcWinSize uint32 `protobuf:"varint,3,opt,name=calc_win_size,json=calcWinSize,proto3" json:"calc_win_size,omitempty"`
}

func (x *TCPPacketMeta) Reset() {
	*x = TCPPacketMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPPacketMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPPacketMeta) ProtoMessage() {}

func (x *TCPPacketMeta) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPPacketMeta.ProtoReflect.Descriptor instead.
func (*TCPPacketMeta) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *TCPPacketMeta) GetTcpflags() uint32 {
	if x != nil {
		return x.Tcpflags
	}
	return 0
}

func (x *TCPPacketMeta) GetHlen() uint32 {
	if x != nil {
		return x.Hlen
	}
	return 0
}

func (x *TCPPacketMeta) GetCalcWinSize() uint32 {
	if x != nil {
		return x.CalcWinSize
	}
	return 0
}

type PacketMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size    uint32         `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Time    uint32         `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"` // packet time offset with flow start_time in micro secs
	Plen    uint32         `protobuf:"varint,3,opt,name=plen,proto3" json:"plen,omitempty"` // payload length of transport proto (TCP/UDP/SCTP)
	TcpMeta *TCPPacketMeta `protobuf:"bytes,4,opt,name=tcp_meta,json=tcpMeta,proto3" json:"tcp_meta,omitempty"`
}

func (x *PacketMeta) Reset() {
	*x = PacketMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketMeta) ProtoMessage() {}

func (x *PacketMeta) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketMeta.ProtoReflect.Descriptor instead.
func (*PacketMeta) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *PacketMeta) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PacketMeta) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PacketMeta) GetPlen() uint32 {
	if x != nil {
		return x.Plen
	}
	return 0
}

func (x *PacketMeta) GetTcpMeta() *TCPPacketMeta {
	if x != nil {
		return x.TcpMeta
	}
	return nil
}

type PacketLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppProtocol string        `protobuf:"bytes,1,opt,name=app_protocol,json=appProtocol,proto3" json:"app_protocol,omitempty"` // application protocol
	HostName    string        `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`          // hostname (TLS SNI/HTTP...)
	UlPackets   []*PacketMeta `protobuf:"bytes,3,rep,name=ul_packets,json=ulPackets,proto3" json:"ul_packets,omitempty"`
	DlPackets   []*PacketMeta `protobuf:"bytes,4,rep,name=dl_packets,json=dlPackets,proto3" json:"dl_packets,omitempty"`
}

func (x *PacketLog) Reset() {
	*x = PacketLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketLog) ProtoMessage() {}

func (x *PacketLog) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketLog.ProtoReflect.Descriptor instead.
func (*PacketLog) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *PacketLog) GetAppProtocol() string {
	if x != nil {
		return x.AppProtocol
	}
	return ""
}

func (x *PacketLog) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *PacketLog) GetUlPackets() []*PacketMeta {
	if x != nil {
		return x.UlPackets
	}
	return nil
}

func (x *PacketLog) GetDlPackets() []*PacketMeta {
	if x != nil {
		return x.DlPackets
	}
	return nil
}

// flow data log
type FlowLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DlDataBytes      uint32 `protobuf:"varint,1,opt,name=dl_data_bytes,json=dlDataBytes,proto3" json:"dl_data_bytes,omitempty"`                // downlink data bytes
	UlDataBytes      uint32 `protobuf:"varint,2,opt,name=ul_data_bytes,json=ulDataBytes,proto3" json:"ul_data_bytes,omitempty"`                // uplink data bytes
	DlTransportBytes uint32 `protobuf:"varint,3,opt,name=dl_transport_bytes,json=dlTransportBytes,proto3" json:"dl_transport_bytes,omitempty"` // downlink transport bytes
	UlTransportBytes uint32 `protobuf:"varint,4,opt,name=ul_transport_bytes,json=ulTransportBytes,proto3" json:"ul_transport_bytes,omitempty"` // uplink transport bytes
	DlPackets        uint32 `protobuf:"varint,5,opt,name=dl_packets,json=dlPackets,proto3" json:"dl_packets,omitempty"`                        // downlink packets
	UlPackets        uint32 `protobuf:"varint,6,opt,name=ul_packets,json=ulPackets,proto3" json:"ul_packets,omitempty"`                        // uplink packets
	ServerRspTime    uint32 `protobuf:"varint,7,opt,name=server_rsp_time,json=serverRspTime,proto3" json:"server_rsp_time,omitempty"`          // server response time in ms
	ClientRspTime    uint32 `protobuf:"varint,8,opt,name=client_rsp_time,json=clientRspTime,proto3" json:"client_rsp_time,omitempty"`          // client response time in ms
	AppProtocol      string `protobuf:"bytes,9,opt,name=app_protocol,json=appProtocol,proto3" json:"app_protocol,omitempty"`                   // application protocol
	HostName         string `protobuf:"bytes,10,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`                           // hostname (TLS SNI/HTTP/DNS...)
	DlLastPktTime    uint64 `protobuf:"varint,11,opt,name=dl_last_pkt_time,json=dlLastPktTime,proto3" json:"dl_last_pkt_time,omitempty"`       // downlink last packet time
	DlFirstPktTime   uint64 `protobuf:"varint,12,opt,name=dl_first_pkt_time,json=dlFirstPktTime,proto3" json:"dl_first_pkt_time,omitempty"`    // downlink first packet time
	UlLastPktTime    uint64 `protobuf:"varint,13,opt,name=ul_last_pkt_time,json=ulLastPktTime,proto3" json:"ul_last_pkt_time,omitempty"`       // uplink last packet time
	UlFirstPktTime   uint64 `protobuf:"varint,14,opt,name=ul_first_pkt_time,json=ulFirstPktTime,proto3" json:"ul_first_pkt_time,omitempty"`    // uplink first packet time
	FlowState        int32  `protobuf:"varint,15,opt,name=flow_state,json=flowState,proto3" json:"flow_state,omitempty"`                       // current state of this flow
}

func (x *FlowLog) Reset() {
	*x = FlowLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLog) ProtoMessage() {}

func (x *FlowLog) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLog.ProtoReflect.Descriptor instead.
func (*FlowLog) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *FlowLog) GetDlDataBytes() uint32 {
	if x != nil {
		return x.DlDataBytes
	}
	return 0
}

func (x *FlowLog) GetUlDataBytes() uint32 {
	if x != nil {
		return x.UlDataBytes
	}
	return 0
}

func (x *FlowLog) GetDlTransportBytes() uint32 {
	if x != nil {
		return x.DlTransportBytes
	}
	return 0
}

func (x *FlowLog) GetUlTransportBytes() uint32 {
	if x != nil {
		return x.UlTransportBytes
	}
	return 0
}

func (x *FlowLog) GetDlPackets() uint32 {
	if x != nil {
		return x.DlPackets
	}
	return 0
}

func (x *FlowLog) GetUlPackets() uint32 {
	if x != nil {
		return x.UlPackets
	}
	return 0
}

func (x *FlowLog) GetServerRspTime() uint32 {
	if x != nil {
		return x.ServerRspTime
	}
	return 0
}

func (x *FlowLog) GetClientRspTime() uint32 {
	if x != nil {
		return x.ClientRspTime
	}
	return 0
}

func (x *FlowLog) GetAppProtocol() string {
	if x != nil {
		return x.AppProtocol
	}
	return ""
}

func (x *FlowLog) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *FlowLog) GetDlLastPktTime() uint64 {
	if x != nil {
		return x.DlLastPktTime
	}
	return 0
}

func (x *FlowLog) GetDlFirstPktTime() uint64 {
	if x != nil {
		return x.DlFirstPktTime
	}
	return 0
}

func (x *FlowLog) GetUlLastPktTime() uint64 {
	if x != nil {
		return x.UlLastPktTime
	}
	return 0
}

func (x *FlowLog) GetUlFirstPktTime() uint64 {
	if x != nil {
		return x.UlFirstPktTime
	}
	return 0
}

func (x *FlowLog) GetFlowState() int32 {
	if x != nil {
		return x.FlowState
	}
	return 0
}

// stream data log
type StreamLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	STos        uint32 `protobuf:"varint,1,opt,name=sTos,proto3" json:"sTos,omitempty"`                                 // source Type of Service
	DTos        uint32 `protobuf:"varint,2,opt,name=dTos,proto3" json:"dTos,omitempty"`                                 // destination Type of Service
	TotPkts     uint32 `protobuf:"varint,3,opt,name=TotPkts,proto3" json:"TotPkts,omitempty"`                           // total number of packets exchanged
	TotBytes    uint32 `protobuf:"varint,4,opt,name=TotBytes,proto3" json:"TotBytes,omitempty"`                         // total bytes exchanged
	SrcBytes    uint32 `protobuf:"varint,5,opt,name=SrcBytes,proto3" json:"SrcBytes,omitempty"`                         // number of bytes sent by source
	AppProtocol string `protobuf:"bytes,6,opt,name=app_protocol,json=appProtocol,proto3" json:"app_protocol,omitempty"` // application protocol
	State       uint32 `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`                               // current state of this stream
}

func (x *StreamLog) Reset() {
	*x = StreamLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLog) ProtoMessage() {}

func (x *StreamLog) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLog.ProtoReflect.Descriptor instead.
func (*StreamLog) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *StreamLog) GetSTos() uint32 {
	if x != nil {
		return x.STos
	}
	return 0
}

func (x *StreamLog) GetDTos() uint32 {
	if x != nil {
		return x.DTos
	}
	return 0
}

func (x *StreamLog) GetTotPkts() uint32 {
	if x != nil {
		return x.TotPkts
	}
	return 0
}

func (x *StreamLog) GetTotBytes() uint32 {
	if x != nil {
		return x.TotBytes
	}
	return 0
}

func (x *StreamLog) GetSrcBytes() uint32 {
	if x != nil {
		return x.SrcBytes
	}
	return 0
}

func (x *StreamLog) GetAppProtocol() string {
	if x != nil {
		return x.AppProtocol
	}
	return ""
}

func (x *StreamLog) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

// HTTP log message
type HttpLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqStartTime      uint64 `protobuf:"varint,1,opt,name=req_start_time,json=reqStartTime,proto3" json:"req_start_time,omitempty"`
	ReqEndTime        uint64 `protobuf:"varint,2,opt,name=req_end_time,json=reqEndTime,proto3" json:"req_end_time,omitempty"`
	RspStartTime      uint64 `protobuf:"varint,3,opt,name=rsp_start_time,json=rspStartTime,proto3" json:"rsp_start_time,omitempty"`
	RspEndTime        uint64 `protobuf:"varint,4,opt,name=rsp_end_time,json=rspEndTime,proto3" json:"rsp_end_time,omitempty"`
	ReqMethod         string `protobuf:"bytes,5,opt,name=req_method,json=reqMethod,proto3" json:"req_method,omitempty"`
	ReqUri            string `protobuf:"bytes,6,opt,name=req_uri,json=reqUri,proto3" json:"req_uri,omitempty"`
	ReqHost           string `protobuf:"bytes,7,opt,name=req_host,json=reqHost,proto3" json:"req_host,omitempty"`
	UserAgent         string `protobuf:"bytes,8,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	ReqVersion        string `protobuf:"bytes,9,opt,name=req_version,json=reqVersion,proto3" json:"req_version,omitempty"`
	StatusCode        string `protobuf:"bytes,10,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ContentType       string `protobuf:"bytes,11,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Referer           string `protobuf:"bytes,12,opt,name=referer,proto3" json:"referer,omitempty"`
	ReqLength         uint64 `protobuf:"varint,13,opt,name=req_length,json=reqLength,proto3" json:"req_length,omitempty"`
	RspLength         uint64 `protobuf:"varint,14,opt,name=rsp_length,json=rspLength,proto3" json:"rsp_length,omitempty"`
	DefinedContentLen uint64 `protobuf:"varint,15,opt,name=defined_content_len,json=definedContentLen,proto3" json:"defined_content_len,omitempty"`
	ActualContentLen  uint64 `protobuf:"varint,16,opt,name=actual_content_len,json=actualContentLen,proto3" json:"actual_content_len,omitempty"`
	Flag              uint32 `protobuf:"varint,17,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *HttpLog) Reset() {
	*x = HttpLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpLog) ProtoMessage() {}

func (x *HttpLog) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpLog.ProtoReflect.Descriptor instead.
func (*HttpLog) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{6}
}

func (x *HttpLog) GetReqStartTime() uint64 {
	if x != nil {
		return x.ReqStartTime
	}
	return 0
}

func (x *HttpLog) GetReqEndTime() uint64 {
	if x != nil {
		return x.ReqEndTime
	}
	return 0
}

func (x *HttpLog) GetRspStartTime() uint64 {
	if x != nil {
		return x.RspStartTime
	}
	return 0
}

func (x *HttpLog) GetRspEndTime() uint64 {
	if x != nil {
		return x.RspEndTime
	}
	return 0
}

func (x *HttpLog) GetReqMethod() string {
	if x != nil {
		return x.ReqMethod
	}
	return ""
}

func (x *HttpLog) GetReqUri() string {
	if x != nil {
		return x.ReqUri
	}
	return ""
}

func (x *HttpLog) GetReqHost() string {
	if x != nil {
		return x.ReqHost
	}
	return ""
}

func (x *HttpLog) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *HttpLog) GetReqVersion() string {
	if x != nil {
		return x.ReqVersion
	}
	return ""
}

func (x *HttpLog) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *HttpLog) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *HttpLog) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *HttpLog) GetReqLength() uint64 {
	if x != nil {
		return x.ReqLength
	}
	return 0
}

func (x *HttpLog) GetRspLength() uint64 {
	if x != nil {
		return x.RspLength
	}
	return 0
}

func (x *HttpLog) GetDefinedContentLen() uint64 {
	if x != nil {
		return x.DefinedContentLen
	}
	return 0
}

func (x *HttpLog) GetActualContentLen() uint64 {
	if x != nil {
		return x.ActualContentLen
	}
	return 0
}

func (x *HttpLog) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

// DNS Log message
type DnsLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStartRecord uint64   `protobuf:"varint,1,opt,name=time_start_record,json=timeStartRecord,proto3" json:"time_start_record,omitempty"`
	TimeEndRecord   uint64   `protobuf:"varint,2,opt,name=time_end_record,json=timeEndRecord,proto3" json:"time_end_record,omitempty"`
	TransactionId   int32    `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	QueryName       string   `protobuf:"bytes,4,opt,name=query_name,json=queryName,proto3" json:"query_name,omitempty"`
	QueryFlags      int32    `protobuf:"varint,5,opt,name=query_flags,json=queryFlags,proto3" json:"query_flags,omitempty"`
	QueryType       int32    `protobuf:"varint,6,opt,name=query_type,json=queryType,proto3" json:"query_type,omitempty"`
	QueryClass      int32    `protobuf:"varint,7,opt,name=query_class,json=queryClass,proto3" json:"query_class,omitempty"`
	RspFlags        int32    `protobuf:"varint,8,opt,name=rsp_flags,json=rspFlags,proto3" json:"rsp_flags,omitempty"`
	DnsAns          []string `protobuf:"bytes,9,rep,name=dns_ans,json=dnsAns,proto3" json:"dns_ans,omitempty"`
}

func (x *DnsLog) Reset() {
	*x = DnsLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsLog) ProtoMessage() {}

func (x *DnsLog) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsLog.ProtoReflect.Descriptor instead.
func (*DnsLog) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{7}
}

func (x *DnsLog) GetTimeStartRecord() uint64 {
	if x != nil {
		return x.TimeStartRecord
	}
	return 0
}

func (x *DnsLog) GetTimeEndRecord() uint64 {
	if x != nil {
		return x.TimeEndRecord
	}
	return 0
}

func (x *DnsLog) GetTransactionId() int32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *DnsLog) GetQueryName() string {
	if x != nil {
		return x.QueryName
	}
	return ""
}

func (x *DnsLog) GetQueryFlags() int32 {
	if x != nil {
		return x.QueryFlags
	}
	return 0
}

func (x *DnsLog) GetQueryType() int32 {
	if x != nil {
		return x.QueryType
	}
	return 0
}

func (x *DnsLog) GetQueryClass() int32 {
	if x != nil {
		return x.QueryClass
	}
	return 0
}

func (x *DnsLog) GetRspFlags() int32 {
	if x != nil {
		return x.RspFlags
	}
	return 0
}

func (x *DnsLog) GetDnsAns() []string {
	if x != nil {
		return x.DnsAns
	}
	return nil
}

var File_event_proto protoreflect.FileDescriptor

var file_event_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x03,
	0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x73, 0x74, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x23, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x08, 0x2e, 0x49, 0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x69, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x04,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x44, 0x6e, 0x73, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x12, 0x24, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x0c, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x63, 0x0a, 0x0d, 0x54,
	0x43, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x63, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x74, 0x63, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x61, 0x6c, 0x63, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x63, 0x57, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x73, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6c, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x63,
	0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x43, 0x50, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x74, 0x63,
	0x70, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x75, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x75, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x0a, 0x64, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x09, 0x64, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xc2, 0x04, 0x0a, 0x07,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x64, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x75,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6c,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x75, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x73, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x73, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x73, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x6c, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x64, 0x6c, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70,
	0x6b, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64,
	0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x10, 0x75, 0x6c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x6b, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x75, 0x6c, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x75, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6b, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xbe, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x54, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x54,
	0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x54, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x64, 0x54, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x74, 0x50, 0x6b, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x54, 0x6f, 0x74, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x72, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x53, 0x72, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xba, 0x04, 0x0a, 0x07, 0x48, 0x74, 0x74, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72,
	0x73, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72,
	0x73, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x72, 0x73, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x71, 0x55, 0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x73, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x73, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xb9,
	0x02, 0x0a, 0x06, 0x44, 0x6e, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x73, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x73, 0x70, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6e, 0x73, 0x41, 0x6e, 0x73, 0x2a, 0x98, 0x02, 0x0a, 0x07, 0x49,
	0x50, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x47, 0x4d, 0x50,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x49, 0x50, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x43, 0x50, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x47, 0x50, 0x10, 0x08, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x55, 0x50, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x11,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x44, 0x50, 0x10, 0x16, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x50, 0x10,
	0x1d, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x43, 0x43, 0x50, 0x10, 0x21, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x50, 0x56, 0x36, 0x10, 0x29, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x53, 0x56, 0x50, 0x10, 0x2e, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x52, 0x45, 0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x53, 0x50, 0x10,
	0x32, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x48, 0x10, 0x33, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x54, 0x50,
	0x10, 0x5c, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x45, 0x54, 0x50, 0x48, 0x10, 0x5e, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x10, 0x62, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x49, 0x4d,
	0x10, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4d, 0x50, 0x10, 0x6c, 0x12, 0x09, 0x0a, 0x04,
	0x53, 0x43, 0x54, 0x50, 0x10, 0x84, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x44, 0x50, 0x4c, 0x49,
	0x54, 0x45, 0x10, 0x88, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x89, 0x01,
	0x12, 0x0d, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x8f, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0xff, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x4d, 0x50, 0x54,
	0x43, 0x50, 0x10, 0x86, 0x02, 0x2a, 0x41, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x44, 0x5f, 0x55,
	0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x44, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData = file_event_proto_rawDesc
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_proto_rawDescData)
	})
	return file_event_proto_rawDescData
}

var file_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_event_proto_goTypes = []interface{}{
	(IPProto)(0),          // 0: IPProto
	(StreamDirection)(0),  // 1: StreamDirection
	(*EventLog)(nil),      // 2: EventLog
	(*TCPPacketMeta)(nil), // 3: TCPPacketMeta
	(*PacketMeta)(nil),    // 4: PacketMeta
	(*PacketLog)(nil),     // 5: PacketLog
	(*FlowLog)(nil),       // 6: FlowLog
	(*StreamLog)(nil),     // 7: StreamLog
	(*HttpLog)(nil),       // 8: HttpLog
	(*DnsLog)(nil),        // 9: DnsLog
}
var file_event_proto_depIdxs = []int32{
	0, // 0: EventLog.ip_proto:type_name -> IPProto
	6, // 1: EventLog.flow:type_name -> FlowLog
	9, // 2: EventLog.dns:type_name -> DnsLog
	8, // 3: EventLog.http:type_name -> HttpLog
	5, // 4: EventLog.packet:type_name -> PacketLog
	7, // 5: EventLog.stream:type_name -> StreamLog
	3, // 6: PacketMeta.tcp_meta:type_name -> TCPPacketMeta
	4, // 7: PacketLog.ul_packets:type_name -> PacketMeta
	4, // 8: PacketLog.dl_packets:type_name -> PacketMeta
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPPacketMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_event_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EventLog_Flow)(nil),
		(*EventLog_Dns)(nil),
		(*EventLog_Http)(nil),
		(*EventLog_Packet)(nil),
		(*EventLog_Stream)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		EnumInfos:         file_event_proto_enumTypes,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_rawDesc = nil
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
